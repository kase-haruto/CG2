#include "EnemyCollection.h"

#include "Engine/core/Clock/ClockManager.h"
#include <lib/myFunc/Random.h>
#include <externals/imgui/imgui.h>

EnemyCollection::EnemyCollection(std::function<void(IMeshRenderable*)> registerCB)
	:registerCB_(registerCB){
	SetName("EnemyCollection", ObjectType::GameObject);
	SceneObject::EnableGuiList();

}

/////////////////////////////////////////////////////////////////////////////////////////
//		更新
/////////////////////////////////////////////////////////////////////////////////////////
void EnemyCollection::Update(){

	for (auto& enemy : enemies_){
		enemy->Update();
	}
}

void EnemyCollection::ShowGui(){
	ImGui::Text("Enemy Count : %d", enemies_.size());
	ImGui::SeparatorText("Spawn");
	ImGui::DragFloat3("SpawnPos", &spawnPos_.x, 0.01f);
	ImGui::InputFloat("SpawnInterval", &spawnInterval_);
	ImGui::SeparatorText("Enemy");
	//for (auto& enemy : enemies_){
	//	enemy->ShowImGui();
	//}
}

///////////////////////////////////////////////////////////////////////////////////////////
//		生成
///////////////////////////////////////////////////////////////////////////////////////////
void EnemyCollection::Spawn(float deltaTime){
	if (spawnTimer_ > spawnInterval_){
		spawnTimer_ = 0.0f;
		auto enemy = new Enemy("debugCube.obj", registerCB_);
		enemy->SetPosition(spawnPos_);
		AddEnemy(std::move(enemy));
	}
	spawnTimer_ += deltaTime;
}

///////////////////////////////////////////////////////////////////////////////////////////
//		追加
///////////////////////////////////////////////////////////////////////////////////////////
void EnemyCollection::AddEnemy(Enemy* enemy){
	if (enemy){
		enemies_.emplace_back(std::move(enemy));
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
//		削除
/////////////////////////////////////////////////////////////////////////////////////////
void EnemyCollection::RemoveEnemy([[maybe_unused]] size_t index){}

/////////////////////////////////////////////////////////////////////////////////////////
//		クリア
/////////////////////////////////////////////////////////////////////////////////////////
void EnemyCollection::Clear(){}
