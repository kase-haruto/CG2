#include "ParticleEffect.h"
/* ========================================================================
/*		include space
/* ===================================================================== */
// c++/lib
#include <externals/imgui/imgui.h>
#include <externals/nlohmann/json.hpp>
#include <fstream>

/////////////////////////////////////////////////////////////////////////////////////////
//		初期化
/////////////////////////////////////////////////////////////////////////////////////////
void ParticleEffect::Initialize(){
	for (auto& ps : particles_){
		ps->Initialize("plane.obj", "particle.png", 1);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////
//		更新
///////////////////////////////////////////////////////////////////////////////////////////
void ParticleEffect::Update(){
	for (auto& ps : particles_){
		ps->Update();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////
//		描画
///////////////////////////////////////////////////////////////////////////////////////////
void ParticleEffect::Draw(){
	for (auto& ps : particles_){
		ps->Draw();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
//		imgui
/////////////////////////////////////////////////////////////////////////////////////////
void ParticleEffect::ImGui(){
	ImGui::Text("Effect Name: %s", name_.c_str());
	for (size_t i = 0; i < particles_.size(); ++i){
		ImGui::PushID(static_cast< int >(i));
		if (ImGui::CollapsingHeader("Particle System", ImGuiTreeNodeFlags_DefaultOpen)){
			particles_[i]->ImGui();
			if (ImGui::Button("Remove")){
				RemoveParticle(i);
				ImGui::PopID();
				break;
			}
		}
		ImGui::PopID();
	}
	if (ImGui::Button("Add New System")){
		auto newSystem = std::make_unique<Particle>();
		AddParticle(std::move(newSystem));
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
//		追加
/////////////////////////////////////////////////////////////////////////////////////////
void ParticleEffect::AddParticle(std::unique_ptr<Particle> particle){
	particle->Initialize("plane.obj", "particle.png", 1);
	particles_.emplace_back(std::move(particle));
}

/////////////////////////////////////////////////////////////////////////////////////////
//		解放
/////////////////////////////////////////////////////////////////////////////////////////
void ParticleEffect::RemoveParticle(size_t index){
	if (index < particles_.size()){
		particles_.erase(particles_.begin() + index);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
//		保存
/////////////////////////////////////////////////////////////////////////////////////////
void ParticleEffect::Save([[maybe_unused]]const std::string& filename){}

/////////////////////////////////////////////////////////////////////////////////////////
//		読み込み
/////////////////////////////////////////////////////////////////////////////////////////
void ParticleEffect::Load([[maybe_unused]] const std::string& filename){}
