#include "EffectEditor.h"

/* ========================================================================
/*		include space
/* ===================================================================== */
// engine
#include <Game/Effect/ParticleEffect/ParticleEffectCollection.h>

// externals
#include <externals/imgui/imgui.h>

/////////////////////////////////////////////////////////////////////////////////////////
//		コンストラクタ
/////////////////////////////////////////////////////////////////////////////////////////
EffectEditor::EffectEditor(ParticleEffectCollection* collection)
	: effectCollection_(collection){
	editorName_ = "EffectEditor";
}

/////////////////////////////////////////////////////////////////////////////////////////
//		gui表示
/////////////////////////////////////////////////////////////////////////////////////////
void EffectEditor::ShowImGuiInterface(){
	ImGui::SeparatorText("New Effect");
	ShowParticleMakingGui();

	ImGui::SeparatorText("Effect List");
	ShowEffectList();

	ImGui::SeparatorText("Effect Properties");
	ShowEffectProperty();
}

/////////////////////////////////////////////////////////////////////////////////////////
//		jsonファイルに保存
/////////////////////////////////////////////////////////////////////////////////////////
void EffectEditor::SaveToJson([[maybe_unused]]const std::string& filePath){}

/////////////////////////////////////////////////////////////////////////////////////////
//		jsonファイルから読み込み
/////////////////////////////////////////////////////////////////////////////////////////
void EffectEditor::LoadFromJson([[maybe_unused]] const std::string& filePath){}

/////////////////////////////////////////////////////////////////////////////////////////
//		particle作成gui
/////////////////////////////////////////////////////////////////////////////////////////
void EffectEditor::ShowParticleMakingGui(){
	static char effectName[128] = "";
	ImGui::InputText("Effect Name", effectName, sizeof(effectName));
	if (ImGui::Button("Create Effect")){
		auto newEffect = std::make_unique<ParticleEffect>();
		newEffect->AddParticle(std::make_unique<Particle>());
		effectCollection_->AddEffect(std::move(newEffect));
		effectName[0] = '\0';
	}
}
/////////////////////////////////////////////////////////////////////////////////////////
//		effectリスト表示
/////////////////////////////////////////////////////////////////////////////////////////
void EffectEditor::ShowEffectList(){
	auto& effects = effectCollection_->GetEffects();
	for (int i = 0; i < effects.size(); ++i){
		bool isSelected = (selectedEffectIndex_ == static_cast< int >(i));
		if (ImGui::Selectable(("Effect ##" + std::to_string(i)).c_str(), isSelected)){
			selectedEffectIndex_ = static_cast< int >(i);
		}
		if (isSelected && ImGui::Button("Remove")){
			RemoveEffect(i);
			selectedEffectIndex_ = -1;
			break;
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
//		effectプロパティ表示
/////////////////////////////////////////////////////////////////////////////////////////
void EffectEditor::ShowEffectProperty(){
	if (selectedEffectIndex_ >= 0 && selectedEffectIndex_ < static_cast< int >(effectCollection_->GetEffects().size())){
		effectCollection_->GetEffects()[selectedEffectIndex_]->ImGui();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
//		effect追加
/////////////////////////////////////////////////////////////////////////////////////////
void EffectEditor::AddEffect(std::unique_ptr<ParticleEffect> effect){
	effectCollection_->AddEffect(std::move(effect));
}

/////////////////////////////////////////////////////////////////////////////////////////
//		effect削除
/////////////////////////////////////////////////////////////////////////////////////////
void EffectEditor::RemoveEffect(int index){ effectCollection_->RemoveEffect(index); }
